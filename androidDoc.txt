https://yq.aliyun.com/articles/211914
https://github.com/JsonChao/Awesome-Android-Interview
https://www.jianshu.com/p/88e32ef66ef2  知识问题集合

https://zhuanlan.zhihu.com/p/25671699
Java 虚拟机、Art、Dalvik 他们的区别。
Java 虚拟机结构：java堆、java栈、方法区、本地方法栈、pc寄存器、内存、类加载系统、垃圾回收系统、、执行引擎
java回收采用回收复制算法：两块相同大小的内存空间，gc回收时
Dalvik虚拟机：java-class-dex
    区别：Dalvik虚拟机基于寄存器，而JVM基于栈，因为app在手机中可能运行一会就被关闭，而java程序运行几个月


activity相关:
   1、生命周期(准备创建--onCreate--已创建--onStart--开始--onResume--正常--onPasue--暂停--onStop--停止--onDstory--死亡)
   2、横竖屏切换生命周期调用
不设置Activity的android:configChanges时，切屏会重新回掉各个生命周期，切横屏时会执行一次，切竖屏时会执行两次
设置Activity的android:configChanges=”orientation”时，切屏还是会调用各个生命周期，切换横竖屏只会执行一次
设置Activity的android:configChanges=”orientation |keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法


   3、activity被回收优先级
   4、activity启动模式：标准、栈顶单例、桟单例、实例单例 	http://blog.csdn.net/guolin_blog/article/details/41087993

Binder相关: http://weishu.me/2016/01/12/binder-index-for-newer/
   Service远程端:提供的服务接口 + Binder → nativie层的Binder框架（将binder的句柄注入到内核中）
   Client客户端：建立连接获得Binder →  nativie层的Binder框架（获取binder在内核中的句柄）

View的绘制流程:
可以分两部分，第一部分是使用api，绘图图形（术）
  第二部分是绘制顺序（道）：http://hencoder.com/ui-1-5/
  在绘制过程中，每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View。每个 View 和 ViewGroup 都  会先调用onDraw()方法来绘制主体，再。
  1、背景：它的绘制发生在一个叫 drawBackground() 的方法里，但这个方法是 private 的，不能重写
  2、主体（onDraw()）：负责自身主题内容绘制，那么关于super.onDraw()放置的位置关系的绘制覆盖的层级。 
  3、子view( dispatchDraw() ):调用 dispatchDraw() 方法来绘制子 View
  4、滑动边缘渐变和滑动条(onDrawForeground()):可以通过 xml 的 android:scrollbarXXX 系列属性或 Java 代码的  View.setXXXScrollbarXXX() 系列方法来设置
  5、前景(onDrawForeground())：可以通过 xml 的 android:foreground 属性或 Java 代码的  View.setForeground() 方法来设置。
  总体而言：draw()方法是以上所有方法的总调度方法，在draw()方法中调用了所有的绘制方法
    public void draw(Canvas canvas) {  
        ...
       drawBackground(Canvas); // 绘制背景（不能重写）
       onDraw(Canvas); // 绘制主体
       dispatchDraw(Canvas); // 绘制子 View
       onDrawForeground(Canvas); // 绘制滑动相关和前景
        ...
    }
    在 ViewGroup 的子类中重写除 dispatchDraw() 以外的绘制方法时，可能需要调用  setWillNotDraw(false)；
    在重写的方法有多个选择时，优先选择 onDraw()。
              
View的布局:(例子：瀑布式标签)计算控件实际尺寸和位置
   1、重写 onMeasure() 来计算内部布局
      1.1、调用每个子 View 的 measure() 来计算子 View 的尺寸
      1.2、计算子 View 的位置并保存子 View 的位置和尺寸
      1.3、计算自己的尺寸并用 setMeasuredDimension() 保存
   2、重写 onLayout() 来摆放子 View
      2.1、调用每个子 View 的 layout() ，让它们保存自己的位置和尺寸。

事件机制:http://blog.csdn.net/morgan_xww/article/details/9372285

触摸反馈:

动画:Android3.0之前有2种，3.0后有3种。
	FrameAnimation（逐帧动画）：将多张图片组合起来进行播放，类似于早期电影的工作原理，很多App的loading是采用这种方式。

	TweenAnimation（补间动画）：可以在一个视图容器内执行一系列简单变换 位置、大小、旋转、透明度
	
PropertyAnimation（属性动画）：属性动画不再仅仅是一种视觉效果了，而是一种不断地对值进行操作的机制，并将值赋到指定对象的指定属性上，可以是任意对象的任意属性。Interpolator和ViewPropertyAnimator的用法   ValueAnimator和ObjectAnimator的高级用法

插件化原理解析:http://weishu.me/2016/01/28/understand-plugin-framework-overview/
	       https://github.com/ljqloveyou123/LiujiaqiAndroid
	代码加载
	资源加载
热修复不重启app：	

<include>、<viewStub>、<merge>标签区别，使用场景
include标签:常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写方便提供了大大的便利。
viewStub标签：与include不同，在没调用viewStub.inflate()方法前，他包含的布局不会被解析，不会显示出来
merge标签:与include不同，在解析时，系统忽略<merge />节点，直接解析他的子元素。 

JVM的内存分布及垃圾回收机制：

Android消息机制(Handler)：主要用于UI线程和子线程之间交互
https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650242304&idx=1&sn=26611df54590f2343dc90f6ba006a488&chksm=88638c6fbf140579d3fdf4522c3e5a4e303e8dd291781f29816684b0d6275206e9a25a8cb139&scene=38#wechat_redirect


Android性能优化：http://androidperformance.com/2017/10/19/Android-performance-optimization-skills-and-tools.html
    1、使用SparseArray和ArrayMap代替HashMap  http://blog.csdn.net/u010687392/article/details/47809295  
    2、启动优化：http://androidperformance.com/2015/12/29/Android应用启动优化-一种DelayLoad的实现和原理-下篇.html
	getWindow().getDecorView().post(new Runnable() {
		@Override
		public void run() {
        	myHandler.post(mLoadingRunnable);
    		}
	});
    3、内存优化(内存性能主要包括内存泄漏， 内存抖动， 内存持续增长(但GC后会下降)， 内存占用过大等问题。)
	http://www.jianshu.com/p/0df5ad0d2e6a

多线程中，线程安全。http://blog.csdn.net/weixin_36244867/article/details/72832632
线程池，需要理解里面各种参数的含义，适用场景。

Rxjava：http://gank.io/post/560e15be2dca930e00da1083
Retrofit: https://www.jianshu.com/p/0dcd0b703ca7

ButterKnife原理:没使用反射，对性能影响很小，使用注解处理器，在编译时，读入java源码，解析注解，然后生成新的java代码。

JSBridge 相关的东西。http://blog.csdn.net/sbsujjbcy/article/details/50752595

MVP架构：http://blog.csdn.net/yulong0809/article/details/78622428
MVVM架构：https://www.jianshu.com/p/5dcdc5798d85

路由架构:通过预编译技术apt，在给activity上添加注解，编译时会生成对应activity跳转指令和对应类全路径到本地库中，其他module在跳转是直接使用指令跳转。
https://www.jianshu.com/p/e2d93259dc34

如何保证service不被杀死:
1、提升优先级(a、设置service优先等级，配置android:priority属性为最高1000；b、监听锁屏事件，开启1像素的activity，解锁销毁activity；c、启动前台service)
2、死后重启（a、注册高频广播，唤起进程，如网络变换，解锁屏幕，开机等；b、双进程呼唤；c、依靠系统唤起；d、onDestroy方法中重启service：service+broadcast方式，就是当servcie走onDestory的时候，发送一个自定义广播，当收到广播的时候重启service）
3、依靠第三方：根据终端不同，在小米手机接入小米推送、华为手机接入华为推送、其他手机接入腾讯信鸽或极光推送与小米推送做A/B Test;

用户token验证
http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html

算法相关: 1、排序 https://www.jianshu.com/p/ae97c3ceea8

加密：
1、对称加密：加密规则和解密规则相同，这将导致加密或解密必须使用同一密钥
    AES算法
	DES算法	
2、非对称加密：加密规则或解密规则不相同，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。通常用公钥进行加密，私钥进行解密
    RSA算法
3、不可逆加密：只能加密，不能解密
    md5算法(可破解)	
	

互联网协议入门：http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html
1、实体层【电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。这一层协议是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。】
2、链接层【单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？这就是"链接层"的功能，它在"实体层"的上方，确定了0和1的分组方式。】
	以太网协议【以太网协议规定了电子信号如何组成数据包，解决了局域网的点对点通信，以太网规定，一组电信号构成一个数据包，叫做"帧"（Frame）。每一帧分成两个部分：标头（Head："标头"包含数据包的一些说明项，比如发送者、接受者、数据类型等等）和数据（Data）。】
			   MAC地址：以太网规定，连入网络的所有设备，都必须具有"网卡"接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。每块网卡出厂的时候，都有一个全世界独一无二的MAC地址
		       广播：首先，一块网卡怎么会知道另一块网卡的MAC地址？ 答：以太网采用了一种很"原始"的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。发送mac地址为FF-FF-FF-FF-FF-FF
3、网络层【以太网协议是依靠MAC地址发送数据，但这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一"包"，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。
			因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用"路由"方式发送。
			这就导致了"网络层"的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做"网络地址"，简称"网址"。】
	IP协议【IP协议解决多个局域网如何互通，目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。】
			路由器：是基于ip协议的一个主机，路由的原理是维护一张路由表，规定了 A 段 IP 地址走出口一，B 段地址走出口二，......通过这套"指路牌"，实现了数据包的转发。
			子网掩码：用于判断IP地址是不是在同一个子网络，172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，单单从IP地址，我们无法判断网络部分。样才能从IP地址判断呢，这就要用到另一个参数"子网掩码"，子网掩码在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0
			网关：互联网由许多子网络共同的连接而形成，其中网关就是管理其中的子网络的一台主机
            DNS：用于解析网址对应的ip地址得一台主机			
			ip数据包：根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。那么怎么放这个数据呢？答案是把IP数据包直接放进以太网数据包的"数据"部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。
					     IP数据包也分为"标头"[包括 版本、长度、IP地址]和"数据"两个部分。
	ARP协议【该协议主要用于从IP地址中得到MAC地址。IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的，但是我们不知道它的MAC地址。所以，我们需要一种机制，能够从IP地址得到MAC地址。
			此时有两种情况，1、两台主机处于同一子网络，这可以通过ARP协议直接获取mac地址，技术实质上是广播ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个"广播"地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。
			2、两台主机处于不同的子网络，这时就把数据包发到网关，再由网关通过路由协议，把数据转发给另一处子网络的网关，接着由这个网关把数据发送到对应的主机上
			总之有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了】 
		 
4、传输层【同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做"端口"（port），"端口"是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。
		  "传输层"的功能，就是建立"端口到端口"的通信。相比之下，"网络层"的功能是建立"主机到主机"的通信。只要确定主机和端口，我们就能实现程序之间的交流。现在，我们必须在数据包中加入端口信息，这就需要新的协议。】
	UDP协议【由"标头"[定义发出端口和接收端口]和"数据"两部分组成。"数据"部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的"数据"部分，此时整个以太网数据格式为（以太网Head : IP Head : UDP/TCP Head : 数据），UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。】
 	
	参考：http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html
	TCP协议【保证数据通信的完整性和可靠性，防止丢包。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。】
	
5、应用层【"应用层"的作用，就是规定应用程序的数据格式。举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了"应用层"。】
	参考：http://www.ruanyifeng.com/blog/2016/08/http.html?tdsourcetag=s_pctim_aiomsg
	HTTP协议【主要规定了客户端和服务器之间的通信格式，默认使用80端口。】
	
	SSH协议【用于计算机之间的加密登录，如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。该协议存在多种实现，既有商业实现，也有开源实现。】
	
	DHCP协议【该协议主要用于给电脑动态获取ip地址以及网络参数的，当电脑连上网线时，电脑会自动分配ip地址，这就用到DHCP协议，协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做"DHCP服务器"。新的计算机加入网络，必须向"DHCP服务器"发送一个"DHCP请求"数据包，申请IP地址和相关的网络参数。
			 由于该协议是应用层协议，建立在UDP协议之上的，因此发送的数据格式为： 以太网标头:[ip标头: [UDP标头: 数据包]]]
			 一、首先需要构建发送数据包内容规则
				1、最前面的"以太网标头"，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。
				2、后面的"IP标头"，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。
				3、最后的"UDP标头"，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。
			 二、这个数据包构造完成后，就可以发出了。以太网是广播发送
			 三、此时在整个子网中所有主机接收到这个数据包，其中DHCP服务器发现其中发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道"这个包是发给我的"，而其他计算机就可以丢弃这个包。
			 四、最后DHCP服务就会创建一个ip地址，以及本网络的具体参数放入Data部分，于是新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。】
	DNS协议【该协议作用是根据域名查出IP地址，我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。这时DNS协议就出现了，已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。】
	
应用：浏览器访问google.com网址是如何进行数据传递的？
    答：1、首先经过http协议，把数据封装为http请求头和请求体，
	    2、接着会把这个数据包再次嵌套到TCP协议的数据体中，同时TCP协议会设置端口
		3、然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，此时需要通过DNS协议获取google的ip地址
		4、最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。如果数据包太大，则需要要切分数据包分次发送
		5、经过多个网关的转发，Google的服务器收到了这多个以太网数据包。根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的"HTTP请求"，接着做出"HTTP响应"，再用TCP协议发回来。
