git教程

版本控制原理：工作区、暂存区、版本库(分支+暂存区)的概念，add、commit命令的操作原理

安装
配置本地提交账号
git config --global user.name "ton"
git config --global user.email "ton@qq.com"

创建仓库
1、使用cd命令切换到你想要的目录
2、使用mkdir {dirname} 创建你的目录
3、使用cd命令进入的目录
4、使用git init命令把该目录变为可管理的仓库
5、使用ls -ah可以查看该目录多了一个.git目录文件，默认是隐藏的
提交文件
1、在仓库创建文件
2、使用git add <file>命令添加该文件到仓库，成功后无任何提示 【git add ton.txt】
3、使用git commit -m <message>命令提交该文件到仓库，成功之后 1 file changed, 12 insertions(+) 的提示 【git commit -m "提交说明" ton.txt】
查看文件变化
1、使用git status查看是仓库当前的状态，告诉你那个文件被修改了
2、使用git diff查看仓库文件修改了什么内容
修改文件,切记一定要记得commit
1、修改版本库文件名称 git mv <old-file> <new-file>
2、工作区的文件删除了，但版本库还没有，要在版本库中删除该文件 git rm <file> 
3、工作区的文件删除了，但版本库还没有，要把文件恢复到工作区 git checkout -- <file>
版本日志查看
1、git log查看日志，可以使用git log --pretty=oneline单行查看，注意每次提交都有一个16位的id
2、git log --graph 查看分支合并图，可以使用git log --graph --pretty=oneline --abbrev-commit单行精简查看
版本回退
1、更新到指定版本，前提是必须记住那个版本的id，可以通过git log查看，也可以通过git reflog查看，使用命令  git reset --hard <commitId>
2、回滚版本，通过git reset --hard HEAD~<前?个版本>
撤销
1、当你乱写工作区，但还没add到暂存区，可以使用 git checkout -- <file> 从版本库里的最近一个版本(add或commit)替换到工作区
2、当你乱写工作区，并且还add到暂存区，可以使用 git reset HEAD <file> 撤销暂存区本次的add操作内容，然后再使用步骤1
分支
1、概念：每次提交git都会把他们串成一条时间线，这条时间线就是一个分支，条时间线起点线最早的称为主分支master，而HEAD指向的就是当前分支
2、创建&切换dev分支 使用 git checkout -b <name> 等价于两条指令，创建 git branch <name> 分支，切换 git checkout <name> 分支
3、查看当前分支git branch，带*号为当前分支
4、合并分支，使用 git merge <name> 合并指定的name分支到当前分支,注意这个合并是master分支没有冲突的情况下操作，若合并之后存在冲突，者手动进行解决冲突，然后再次提交即可
   -----合并说明，使用git merge命令，如果没有冲突，git默认使用Fast forward模式，该模式会导致一个问题,删除分支后，会丢失该分支的历史信息，为了安全通常采用git merge --no-ff -m "提交说明" <name> 
5、删除分支，使用 git branch -d <name> 删除name分支，但是删除的分支没有合并过，请使用 git branch -D <name> 进行删除
6、缓存分支的工作区，使用 git stash 命令进行缓存，使用git stash pop还原并删除缓存，等价于使用git stash apply 先恢复 再 使用git stash drop来删除缓存，使用场景描述，当你正在完成本周的需求的一半时，图片要解决之前版本的bug，这个时候你不想提交还没开发完的功能，但又必须去处理这个bug，怎么办？
分支策略
1、master分支主分支，是非常稳定的，仅仅用于发布新版本，平时不能再该分支上修改内容
2、dev分支为开发分支，是不稳定的，这条分支可以是一条或多条，每个开发人员自己拥有一条开发分支，每次合并都在开发分支上进行小组合并，发布版本是，才合并到master分支上
3、推荐本地分支master和dev要推送到远程仓库，随时同步，其他分支可以自己在本地上玩
标签管理
1、概念:之前版本回退的时候需要一个commitid，由于这个id不好记，那么就引入标签的概率，相当于别名，用于记住某个版本，便于以后回滚版本
2、创建标签：首先切换到需要打标签的分支上，使用 git tag -a <标签名> -m <标签说明> 创建新标签，此标签默认打到最近一次commit上，也可使用git tag -a <标签名> -m <标签说明> <commitId>，当然可以使用简洁的命令 git tag <标签名>
3、查看所有标签:git tag，查看标签说明：git show <标签名>
4、删除标签：git tag -d <标签名>
远程仓库
1、本地仓库关联到远程仓库
	a、创建GitHub账号
	b、配置只允许你提交内容，就必须要配置ssh协议秘钥，方法：查看你的电脑用户主目录中有没有.ssh目录，若没有，执行 ssh-keygen -t rsa -C "ton@qq.com",一路回车，在用户目录下会创建id_rsa和id_rsa.pub两个文件，到时候你只需要把公钥id_rsa.pub文件内容配置到github中就可以了
	c、在github中创建仓库，成功之后会提示让你关联你的本地仓库
	d、将本地仓库关联到远程仓库上：git remote add origin <远程仓库的地址>   
	e、本地创建和远程对应的分支：git checkout -b <本地分支名称> origin/<远程分支名称>
    f、本地分支与远程分支建立关联: git branch --set-upstream-to <本地分支名称> origin/<远程分支名称>
2、查看远程仓库信息:git remote 或者 git remote -v
3、远程仓库克隆到本地，切换到你要放项目的目录，然后使用 git clone <远程仓库的地址> 进行克隆，注意这里克隆分两种协议，ssh协议是很快的，https协议比较慢
4、更新(拉取)内容到本地仓库：git pull origin <远程分支名称>，如果提示"no tracking information"，说明本地分支和远程分支的链接关系没有创建，此时可能合并有冲突，但这个处理方法和合并分支处理相同
5、提交(推送)内容到远程仓库：git push -u origin <远程分支名称>（由于第一次远程仓库是空的，所以添加了-u的参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送可以简化命令 git push origin <master/dev>）

