git教程

版本控制原理：工作区、暂存区、版本库(分支+暂存区)的概念，add、commit命令的操作原理

安装
配置本地提交账号
git config --global user.name "ton"
git config --global user.email "ton@qq.com"

创建仓库
1、使用cd命令切换到你想要的目录
2、使用mkdir {dirname} 创建你的目录
3、使用cd命令进入的目录
4、使用git init命令把该目录变为可管理的仓库
5、使用ls -ah可以查看该目录多了一个.git目录文件，默认是隐藏的
提交文件
1、在仓库创建文件
2、使用git add <file>命令添加该文件到仓库，成功后无任何提示 【git add ton.txt】
3、使用git commit -m <message>命令提交该文件到仓库，成功之后 1 file changed, 12 insertions(+) 的提示 【git commit -m "提交说明" ton.txt】
查看文件变化
1、使用git status查看是仓库当前的状态，告诉你那个文件被修改了
2、使用git diff查看仓库文件修改了什么内容
修改文件,切记一定要记得commit
1、修改版本库文件名称 git mv <old-file> <new-file>
2、工作区的文件删除了，但版本库还没有，要在版本库中删除该文件 git rm <file> 
3、工作区的文件删除了，但版本库还没有，要把文件恢复到工作区 git checkout -- <file>
版本日志查看
1、git log查看日志，可以使用git log --pretty=oneline单行查看，注意每次提交都有一个16位的id
版本回退
1、更新到指定版本，前提是必须记住那个版本的id，可以通过git log查看，也可以通过git reflog查看，使用命令  git reset --hard <commitId>
2、回滚版本，通过git reset --hard HEAD~<前?个版本>
撤销
1、当你乱写工作区，但还没add到暂存区，可以使用 git checkout -- <file> 从版本库里的最近一个版本(add或commit)替换到工作区
2、当你乱写工作区，并且还add到暂存区，可以使用 git reset HEAD <file> 撤销暂存区本次的add操作内容，然后再使用步骤1
远程仓库
1、本地仓库关联到远程仓库
1.1、创建GitHub账号
1.2、配置只允许你提交内容，就必须要配置ssh协议秘钥，方法：查看你的电脑用户主目录中有没有.ssh目录，若没有，执行 ssh-keygen -t rsa -C "ton@qq.com",一路回车，在用户目录下会创建id_rsa和id_rsa.pub两个文件，到时候你只需要把公钥id_rsa.pub文件内容配置到github中就可以了
1.3、在github中创建仓库，成功之后会提示让你关联你的本地仓库，后面有执行命令   关联：git remote add origin <远程仓库的地址>     推送内容：git push -u origin master（由于第一次远程仓库是空的，所以添加了-u的参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。以后只要本地提交了，推送到远程只需执行 git push origin master）
2、远程仓库克隆到本地仓库，切换到你要放项目的目录，然后使用 git clone <远程仓库的地址> 进行克隆，注意这里克隆分两种协议，ssh协议是很快的，https协议比较慢
分支
1、概念：每次提交git都会把他们串成一条时间线，这条时间线就是一个分支，条时间线起点线最早的称为主分支master，而HEAD指向的就是当前分支
2、创建&切换dev分支 使用 git checkout -b <name> 等价于两条指令，创建 git branch <name> 分支，切换 git checkout <name> 分支
3、查看当前分支git branch，带*号为当前分支
4、合并分支，使用 git merge <name> 合并指定的name分支到当前分支，若合并之后存在冲突，者手动进行解决冲突，然后再次提交即可
5、删除分支，使用 git branch -d <name> 删除name分支
